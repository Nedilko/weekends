name: Feature Deploy

on:
  pull_request:
    branches: [ main ]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      repo: ${{ steps.vars.outputs.repo }}
      tag: ${{ steps.vars.outputs.tag }}
    steps:
      - name: Use repository
        uses: actions/checkout@v2
      - name: Build variables
        id: vars
        run: |
          echo "::set-output name=repo::$GITHUB_REPOSITORY"
          echo "::set-output name=tag::$(git rev-parse --short "$GITHUB_SHA")"

  test:
    name: test
    # runs-on: self-hosted
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      # - name: use node v14  
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '14'
      #     cache: 'npm'
      #     cache-dependency-path: package-lock.json

      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: install dependencies
        run: npm ci

      - name: run tests
        run: npm test

      # - name: tag name
      #   run: |
      #     echo "{{ env.GITHUB_REF }}"
      #     echo "{{ env.GITHUB_SHA }}"
      #     echo "{{ env.GITHUB_REPOSITORY }}"
  
  coverage:
    name: coverage
    # runs-on: self-hosted
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      # - name: use node v14  
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '14'
      #     cache: 'npm'
      #     cache-dependency-path: package-lock.json

      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: install dependencies
        run: npm ci

      - name: run coverage
        run: npm run test:coverage

  lint:
    name: lint
    # runs-on: self-hosted
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      # - name: use node v14  
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '14'
      #     cache: 'npm'
      #     cache-dependency-path: package-lock.json

      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: install dependencies
        run: npm ci

      - name: run linting
        run: npm run lint
  
  build:
    name: build
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    needs: [test, coverage, lint]

    steps:
      - name: checkout
        uses: actions/checkout@v3

      # - name: use node v14  
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '14'
      #     cache: 'npm'
      #     cache-dependency-path: package-lock.json

      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: install dependencies
        run: npm ci

      - name: build app
        run: npm run build:production
      
      - name: upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

  pack:
    name: pack and push
    # runs-on: self-hosted
    runs-on: ubuntu-latest
    needs: [build, setup]

    steps:
      - name: checkout
        uses: actions/checkout@v3

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ needs.setup.outputs.repo }}:${{ needs.setup.outputs.tag }}
          # cache-from: type=registry,ref=ghcr.io/nedilko/weekends:buildcache
          # cache-to: type=registry,ref=ghcr.io/nedilko/weekends:buildcache,mode=max

  # deployment:
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: development
  #     url: https://dev.weekends.nac.in.ua
  #   needs: build
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v3
  #     - name: 'Deploy'
  #       uses: 'deliverybot/helm@master'
  #       with:
  #         token: '${{ github.token }}'
  #         chart: 'app'
  #       env:
  #         KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
